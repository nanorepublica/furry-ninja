//@ sourceMappingURL=transfer.map
// Generated by CoffeeScript 1.6.1
(function() {
  var DataTransfer,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var url;
    url = new DataTransfer('/data/metrics');
    return url.get_data();
  });

  DataTransfer = (function() {

    DataTransfer.prototype.metrics_list = {};

    function DataTransfer(url) {
      this.url = url;
    }

    DataTransfer.prototype.format_row = function(row) {
      var metric, point, rarray, _ref;
      rarray = row.split(' ');
      console.log(window.Metric);
      metric = (_ref = rarray[0], __indexOf.call(Metric.names, _ref) < 0) ? new window.Metric(rarray[0]) : this.metrics_list[rarray[0]];
      console.log(metric);
      this.metrics_list[rarray[0]] = metric;
      point = {
        'timestamp': new Date(+rarray[1] * 1000),
        'value': rarray[2],
        'tags': {}
      };
      rarray.map(function(elem) {
        if (__indexOf.call(elem, '=') >= 0) {
          return point['tags'][elem.split('=')[0]] = elem.split('=')[1];
        }
      });
      return metric.add_point(point);
    };

    DataTransfer.prototype.get_data = function() {
      var self;
      self = this;
      return d3.text(this.url, function(error, data) {
        var row, _i, _len, _ref, _results;
        _ref = data.split('\n');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push(self.format_row(row));
        }
        return _results;
      });
    };

    return DataTransfer;

  })();

}).call(this);
